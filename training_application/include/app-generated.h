/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __APP_GENERATED_H__
#define __APP_GENERATED_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.gtk.GDBus.TestInterface */

#define TRAINING_APPLICATION_TYPE_ (training_application__get_type ())
#define TRAINING_APPLICATION_(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TRAINING_APPLICATION_TYPE_, trainingapplication))
#define TRAINING_APPLICATION_IS_(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TRAINING_APPLICATION_TYPE_))
#define TRAINING_APPLICATION__GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TRAINING_APPLICATION_TYPE_, trainingapplicationIface))

struct _trainingapplication;
typedef struct _trainingapplication trainingapplication;
typedef struct _trainingapplicationIface trainingapplicationIface;

struct _trainingapplicationIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_alarm_status) (
    trainingapplication *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_alarm_status) (
    trainingapplication *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_alarmStatus);

  gboolean (*handle_set_alarm_time) (
    trainingapplication *object,
    GDBusMethodInvocation *invocation,
    gint arg_hourAlarmTime,
    gint arg_minAlarmTime);

  gboolean (*handle_set_time) (
    trainingapplication *object,
    GDBusMethodInvocation *invocation,
    gint arg_hourTime,
    gint arg_minTime);

  void (*ring_alarm) (
    trainingapplication *object,
    const gchar *const *arg_messages);

};

GType training_application__get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *training_application__interface_info (void);
guint training_application__override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void training_application__complete_set_time (
    trainingapplication *object,
    GDBusMethodInvocation *invocation);

void training_application__complete_set_alarm_time (
    trainingapplication *object,
    GDBusMethodInvocation *invocation);

void training_application__complete_get_alarm_status (
    trainingapplication *object,
    GDBusMethodInvocation *invocation,
    const gchar *alarmStatus);

void training_application__complete_set_alarm_status (
    trainingapplication *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void training_application__emit_ring_alarm (
    trainingapplication *object,
    const gchar *const *arg_messages);



/* D-Bus method calls: */
void training_application__call_set_time (
    trainingapplication *proxy,
    gint arg_hourTime,
    gint arg_minTime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean training_application__call_set_time_finish (
    trainingapplication *proxy,
    GAsyncResult *res,
    GError **error);

gboolean training_application__call_set_time_sync (
    trainingapplication *proxy,
    gint arg_hourTime,
    gint arg_minTime,
    GCancellable *cancellable,
    GError **error);

void training_application__call_set_alarm_time (
    trainingapplication *proxy,
    gint arg_hourAlarmTime,
    gint arg_minAlarmTime,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean training_application__call_set_alarm_time_finish (
    trainingapplication *proxy,
    GAsyncResult *res,
    GError **error);

gboolean training_application__call_set_alarm_time_sync (
    trainingapplication *proxy,
    gint arg_hourAlarmTime,
    gint arg_minAlarmTime,
    GCancellable *cancellable,
    GError **error);

void training_application__call_get_alarm_status (
    trainingapplication *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean training_application__call_get_alarm_status_finish (
    trainingapplication *proxy,
    gchar **out_alarmStatus,
    GAsyncResult *res,
    GError **error);

gboolean training_application__call_get_alarm_status_sync (
    trainingapplication *proxy,
    gchar **out_alarmStatus,
    GCancellable *cancellable,
    GError **error);

void training_application__call_set_alarm_status (
    trainingapplication *proxy,
    const gchar *arg_alarmStatus,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean training_application__call_set_alarm_status_finish (
    trainingapplication *proxy,
    GAsyncResult *res,
    GError **error);

gboolean training_application__call_set_alarm_status_sync (
    trainingapplication *proxy,
    const gchar *arg_alarmStatus,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TRAINING_APPLICATION_TYPE__PROXY (training_application__proxy_get_type ())
#define TRAINING_APPLICATION__PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TRAINING_APPLICATION_TYPE__PROXY, trainingapplicationProxy))
#define TRAINING_APPLICATION__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TRAINING_APPLICATION_TYPE__PROXY, trainingapplicationProxyClass))
#define TRAINING_APPLICATION__PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TRAINING_APPLICATION_TYPE__PROXY, trainingapplicationProxyClass))
#define TRAINING_APPLICATION_IS__PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TRAINING_APPLICATION_TYPE__PROXY))
#define TRAINING_APPLICATION_IS__PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TRAINING_APPLICATION_TYPE__PROXY))

typedef struct _trainingapplicationProxy trainingapplicationProxy;
typedef struct _trainingapplicationProxyClass trainingapplicationProxyClass;
typedef struct _trainingapplicationProxyPrivate trainingapplicationProxyPrivate;

struct _trainingapplicationProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  trainingapplicationProxyPrivate *priv;
};

struct _trainingapplicationProxyClass
{
  GDBusProxyClass parent_class;
};

GType training_application__proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (trainingapplicationProxy, g_object_unref)
#endif

void training_application__proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
trainingapplication *training_application__proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
trainingapplication *training_application__proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void training_application__proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
trainingapplication *training_application__proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
trainingapplication *training_application__proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TRAINING_APPLICATION_TYPE__SKELETON (training_application__skeleton_get_type ())
#define TRAINING_APPLICATION__SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TRAINING_APPLICATION_TYPE__SKELETON, trainingapplicationSkeleton))
#define TRAINING_APPLICATION__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TRAINING_APPLICATION_TYPE__SKELETON, trainingapplicationSkeletonClass))
#define TRAINING_APPLICATION__SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TRAINING_APPLICATION_TYPE__SKELETON, trainingapplicationSkeletonClass))
#define TRAINING_APPLICATION_IS__SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TRAINING_APPLICATION_TYPE__SKELETON))
#define TRAINING_APPLICATION_IS__SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TRAINING_APPLICATION_TYPE__SKELETON))

typedef struct _trainingapplicationSkeleton trainingapplicationSkeleton;
typedef struct _trainingapplicationSkeletonClass trainingapplicationSkeletonClass;
typedef struct _trainingapplicationSkeletonPrivate trainingapplicationSkeletonPrivate;

struct _trainingapplicationSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  trainingapplicationSkeletonPrivate *priv;
};

struct _trainingapplicationSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType training_application__skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (trainingapplicationSkeleton, g_object_unref)
#endif

trainingapplication *training_application__skeleton_new (void);


G_END_DECLS

#endif /* __APP_GENERATED_H__ */
